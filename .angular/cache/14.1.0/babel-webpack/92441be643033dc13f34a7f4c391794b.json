{"ast":null,"code":"import _asyncToGenerator from \"/Users/kamsi/Documents/School2/COMP229-Web Dev/group work/EliteProduct/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./rest.datasource\";\nexport class ProductRepository {\n  constructor(dataSource) {\n    this.dataSource = dataSource;\n    this.product = [];\n    dataSource.getProductList().subscribe(data => {\n      this.product = data;\n    });\n  }\n\n  getProduct() {\n    return this.product;\n  }\n\n  getItem(id) {\n    return this.product.find(item => item._id === id);\n  }\n\n  saveProduct(item) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // If it does not have id, then create a new item.\n      if (item._id == null || item._id == \"\") {\n        _this.dataSource.insertProduct(item).subscribe(response => {\n          if (response._id) // If API created\n            {\n              _this.product.push(response);\n            } else {\n            // If API send error.\n            // Convert into ResponseModel to get the error message.\n            let error = response;\n            alert(`Error: ${error.message}`);\n          }\n        });\n      } else {\n        // If it has id, then update a existing item.\n        _this.dataSource.updateInventory(item).subscribe(response => {\n          if (response.success) {\n            _this.product.splice(_this.product.findIndex(i => i._id == item._id), 1, item);\n          } else {\n            alert(`Error: ${response.message}`);\n          }\n        });\n      }\n    })();\n  }\n\n  deleteInventory(id) {\n    this.dataSource.deleteInventory(id).subscribe(response => {\n      if (response.success) {\n        this.product.splice(this.product.findIndex(item => item._id == id), 1);\n      } else {\n        alert(`Error: ${response.message}`);\n      }\n    });\n  }\n\n}\n\nProductRepository.ɵfac = function ProductRepository_Factory(t) {\n  return new (t || ProductRepository)(i0.ɵɵinject(i1.RestDataSource));\n};\n\nProductRepository.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductRepository,\n  factory: ProductRepository.ɵfac\n});","map":{"version":3,"mappings":";;;AAMA,OAAM,MAAOA,iBAAP,CAAwB;EAI1BC,YAAoBC,UAApB,EAA8C;IAA1B;IAFZ,eAAqB,EAArB;IAGJA,UAAU,CAACC,cAAX,GAA4BC,SAA5B,CAAsCC,IAAI,IAAG;MACzC,KAAKC,OAAL,GAAeD,IAAf;IACH,CAFD;EAGH;;EAEDE,UAAU;IACN,OAAO,KAAKD,OAAZ;EACH;;EAEDE,OAAO,CAACC,EAAD,EAAW;IACd,OAAQ,KAAKH,OAAL,CAAaI,IAAb,CAAkBC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaH,EAAvC,CAAR;EACH;;EAEKI,WAAW,CAACF,IAAD,EAAc;IAAA;;IAAA;MAE3B;MACA,IAAIA,IAAI,CAACC,GAAL,IAAY,IAAZ,IAAoBD,IAAI,CAACC,GAAL,IAAY,EAApC,EAAwC;QACpC,KAAI,CAACV,UAAL,CAAgBY,aAAhB,CAA8BH,IAA9B,EACKP,SADL,CACeW,QAAQ,IAAG;UAClB,IAAGA,QAAQ,CAACH,GAAZ,EAAiB;YACjB;cACI,KAAI,CAACN,OAAL,CAAaU,IAAb,CAAkBD,QAAlB;YACH,CAHD,MAII;YAAE;YACF;YACA,IAAIE,KAAK,GAAGF,QAAZ;YACAG,KAAK,CAAC,UAAUD,KAAK,CAACE,OAAO,EAAxB,CAAL;UACH;QACJ,CAXL;MAYH,CAbD,MAaO;QACH;QACA,KAAI,CAACjB,UAAL,CAAgBkB,eAAhB,CAAgCT,IAAhC,EAAsCP,SAAtC,CAAgDW,QAAQ,IAAG;UACvD,IAAIA,QAAQ,CAACM,OAAb,EAAsB;YAClB,KAAI,CAACf,OAAL,CAAagB,MAAb,CAAoB,KAAI,CAAChB,OAAL,CAChBiB,SADgB,CACNC,CAAC,IAAIA,CAAC,CAACZ,GAAF,IAASD,IAAI,CAACC,GADb,CAApB,EACuC,CADvC,EAC0CD,IAD1C;UAEH,CAHD,MAII;YACAO,KAAK,CAAC,UAAUH,QAAQ,CAACI,OAAO,EAA3B,CAAL;UACH;QACJ,CARD;MASH;IA3B0B;EA4B9B;;EAEDM,eAAe,CAAChB,EAAD,EAAW;IACtB,KAAKP,UAAL,CAAgBuB,eAAhB,CAAgChB,EAAhC,EAAoCL,SAApC,CAA8CW,QAAQ,IAAG;MACrD,IAAIA,QAAQ,CAACM,OAAb,EAAsB;QAClB,KAAKf,OAAL,CAAagB,MAAb,CAAoB,KAAKhB,OAAL,CAChBiB,SADgB,CACNZ,IAAI,IAAIA,IAAI,CAACC,GAAL,IAAYH,EADd,CAApB,EACuC,CADvC;MAEH,CAHD,MAII;QACAS,KAAK,CAAC,UAAUH,QAAQ,CAACI,OAAO,EAA3B,CAAL;MACH;IACJ,CARD;EASH;;AA1DyB;;;mBAAjBnB,mBAAiB0B;AAAA;;;SAAjB1B;EAAiB2B,SAAjB3B,iBAAiB","names":["ProductRepository","constructor","dataSource","getProductList","subscribe","data","product","getProduct","getItem","id","find","item","_id","saveProduct","insertProduct","response","push","error","alert","message","updateInventory","success","splice","findIndex","i","deleteInventory","i0","factory"],"sourceRoot":"","sources":["/Users/kamsi/Documents/School2/COMP229-Web Dev/group work/EliteProduct/src/app/model/product.repository.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Product } from \"./product.model\";\nimport { RestDataSource } from \"./rest.datasource\";\nimport { ResponseModel } from \"./response.model\";\n\n@Injectable()\nexport class ProductRepository {\n\n    private product: Product[] = [];\n\n    constructor(private dataSource: RestDataSource) {\n        dataSource.getProductList().subscribe(data => {\n            this.product = data;\n        });\n    }\n\n    getProduct(): Product[] {\n        return this.product;\n    }\n\n    getItem(id: string): Product {\n        return (this.product.find(item => item._id === id)!);\n    }\n\n    async saveProduct(item: Product) {\n\n        // If it does not have id, then create a new item.\n        if (item._id == null || item._id == \"\") {\n            this.dataSource.insertProduct(item)\n                .subscribe(response => {\n                    if(response._id) // If API created\n                    {\n                        this.product.push(response);\n                    }\n                    else{ // If API send error.\n                        // Convert into ResponseModel to get the error message.\n                        let error = response as ResponseModel;  \n                        alert(`Error: ${error.message}`);\n                    }\n                });\n        } else {\n            // If it has id, then update a existing item.\n            this.dataSource.updateInventory(item).subscribe(response => {\n                if (response.success) {\n                    this.product.splice(this.product.\n                        findIndex(i => i._id == item._id), 1, item);\n                }\n                else{\n                    alert(`Error: ${response.message}`);\n                }        \n            });\n        }\n    }\n\n    deleteInventory(id: string) {\n        this.dataSource.deleteInventory(id).subscribe(response => {\n            if (response.success) {\n                this.product.splice(this.product.\n                    findIndex(item => item._id == id), 1);                                \n            }\n            else{\n                alert(`Error: ${response.message}`);\n            }\n        })\n    }\n\n}"]},"metadata":{},"sourceType":"module"}