{"ast":null,"code":"import _asyncToGenerator from \"/Users/kamsi/Documents/School2/COMP229-Web Dev/group work/EliteProduct/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./rest.datasource\";\nexport class ProductRepository {\n  constructor(dataSource) {\n    this.dataSource = dataSource;\n    this.products = [];\n    this.categories = [];\n    dataSource.getProductList().subscribe(data => {\n      this.products = data;\n      this.categories = data.map(p => p.category).filter((c, index, array) => array.indexOf(c) == index).sort();\n    });\n  } //get products within category\n\n\n  getProducts(category = \"\") {\n    return this.products.filter(p => category == \"\" || category == p.category);\n  } //get specific product\n\n\n  getProduct(id) {\n    return this.products.find(p => p._id === id);\n  } //get list of categories\n\n\n  getCategories() {\n    return this.categories;\n  } //get all products\n\n\n  getProductdb() {\n    return this.products;\n  } //update/save product\n\n\n  saveProduct(item) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // If it does not have id, then create a new item.\n      if (item._id == null || item._id == \"\") {\n        _this.dataSource.insertProduct(item).subscribe(response => {\n          if (response._id) // If API created\n            {\n              _this.products.push(response);\n            } else {\n            let error = response;\n            alert(`Error: ${error.message}`);\n          }\n        }); // If it has id, then update a existing item.\n\n      } else {\n        _this.dataSource.updateProduct(item).subscribe(response => {\n          if (response.success) {\n            _this.products.splice(_this.products.findIndex(i => i._id == item._id), 1, item);\n          } else {\n            alert(`Error: ${response.message}`);\n          }\n        });\n      }\n    })();\n  } //delete product\n\n\n  deleteProduct(id) {\n    this.dataSource.deleteProduct(id).subscribe(response => {\n      if (response.success) {\n        this.products.splice(this.products.findIndex(item => item._id == id), 1);\n      } else {\n        alert(`Error: ${response.message}`);\n      }\n    });\n  }\n\n}\n\nProductRepository.ɵfac = function ProductRepository_Factory(t) {\n  return new (t || ProductRepository)(i0.ɵɵinject(i1.RestDataSource));\n};\n\nProductRepository.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductRepository,\n  factory: ProductRepository.ɵfac\n});","map":{"version":3,"mappings":";;;AAMA,OAAM,MAAOA,iBAAP,CAAwB;EAK1BC,YAAoBC,UAApB,EAA8C;IAA1B;IAHZ,gBAAsB,EAAtB;IACA,kBAAuB,EAAvB;IAGJA,UAAU,CAACC,cAAX,GAA4BC,SAA5B,CAAsCC,IAAI,IAAG;MACzC,KAAKC,QAAL,GAAgBD,IAAhB;MACA,KAAKE,UAAL,GAAkBF,IAAI,CAACG,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACC,QAAhB,EACbC,MADa,CACN,CAACC,CAAD,EAAIC,KAAJ,EAAWC,KAAX,KAAqBA,KAAK,CAACC,OAAN,CAAcH,CAAd,KAAoBC,KADnC,EAC0CG,IAD1C,EAAlB;IAEH,CAJD;EAKH,CAXyB,CAa1B;;;EACAC,WAAW,CAACP,WAAmB,EAApB,EAAsB;IAC7B,OAAO,KAAKJ,QAAL,CACFK,MADE,CACKF,CAAC,IAAIC,QAAQ,IAAI,EAAZ,IAAkBA,QAAQ,IAAID,CAAC,CAACC,QAD1C,CAAP;EAEH,CAjByB,CAmB1B;;;EACAQ,UAAU,CAACC,EAAD,EAAW;IACjB,OAAQ,KAAKb,QAAL,CAAcc,IAAd,CAAmBX,CAAC,IAAIA,CAAC,CAACY,GAAF,KAAUF,EAAlC,CAAR;EACH,CAtByB,CAwB1B;;;EACAG,aAAa;IACT,OAAO,KAAKf,UAAZ;EACH,CA3ByB,CA6B1B;;;EACAgB,YAAY;IACR,OAAO,KAAKjB,QAAZ;EACH,CAhCyB,CAmC1B;;;EACMkB,WAAW,CAACC,IAAD,EAAc;IAAA;;IAAA;MAE3B;MACA,IAAIA,IAAI,CAACJ,GAAL,IAAY,IAAZ,IAAoBI,IAAI,CAACJ,GAAL,IAAY,EAApC,EAAwC;QACpC,KAAI,CAACnB,UAAL,CAAgBwB,aAAhB,CAA8BD,IAA9B,EACKrB,SADL,CACeuB,QAAQ,IAAG;UAClB,IAAGA,QAAQ,CAACN,GAAZ,EAAiB;YACjB;cACI,KAAI,CAACf,QAAL,CAAcsB,IAAd,CAAmBD,QAAnB;YACH,CAHD,MAII;YACA,IAAIE,KAAK,GAAGF,QAAZ;YACAG,KAAK,CAAC,UAAUD,KAAK,CAACE,OAAO,EAAxB,CAAL;UACH;QACJ,CAVL,EADoC,CAaxC;;MACC,CAdD,MAcO;QACH,KAAI,CAAC7B,UAAL,CAAgB8B,aAAhB,CAA8BP,IAA9B,EAAoCrB,SAApC,CAA8CuB,QAAQ,IAAG;UACrD,IAAIA,QAAQ,CAACM,OAAb,EAAsB;YAClB,KAAI,CAAC3B,QAAL,CAAc4B,MAAd,CAAqB,KAAI,CAAC5B,QAAL,CACjB6B,SADiB,CACPC,CAAC,IAAIA,CAAC,CAACf,GAAF,IAASI,IAAI,CAACJ,GADZ,CAArB,EACuC,CADvC,EAC0CI,IAD1C;UAEH,CAHD,MAII;YACAK,KAAK,CAAC,UAAUH,QAAQ,CAACI,OAAO,EAA3B,CAAL;UACH;QACJ,CARD;MASH;IA3B0B;EA4B9B,CAhEyB,CAkE1B;;;EACAM,aAAa,CAAClB,EAAD,EAAW;IACpB,KAAKjB,UAAL,CAAgBmC,aAAhB,CAA8BlB,EAA9B,EAAkCf,SAAlC,CAA4CuB,QAAQ,IAAG;MACnD,IAAIA,QAAQ,CAACM,OAAb,EAAsB;QAClB,KAAK3B,QAAL,CAAc4B,MAAd,CAAqB,KAAK5B,QAAL,CACjB6B,SADiB,CACPV,IAAI,IAAIA,IAAI,CAACJ,GAAL,IAAYF,EADb,CAArB,EACuC,CADvC;MAEH,CAHD,MAII;QACAW,KAAK,CAAC,UAAUH,QAAQ,CAACI,OAAO,EAA3B,CAAL;MACH;IACJ,CARD;EASH;;AA7EyB;;;mBAAjB/B,mBAAiBsC;AAAA;;;SAAjBtC;EAAiBuC,SAAjBvC,iBAAiB","names":["ProductRepository","constructor","dataSource","getProductList","subscribe","data","products","categories","map","p","category","filter","c","index","array","indexOf","sort","getProducts","getProduct","id","find","_id","getCategories","getProductdb","saveProduct","item","insertProduct","response","push","error","alert","message","updateProduct","success","splice","findIndex","i","deleteProduct","i0","factory"],"sourceRoot":"","sources":["/Users/kamsi/Documents/School2/COMP229-Web Dev/group work/EliteProduct/src/app/models/product.repository.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Product } from \"./product.model\";\nimport { RestDataSource } from \"./rest.datasource\";\nimport { ResponseModel } from \"./response.model\";\n\n@Injectable()\nexport class ProductRepository {\n   \n    private products: Product[] = [];\n    private categories: string[] = [];\n\n    constructor(private dataSource: RestDataSource) {\n        dataSource.getProductList().subscribe(data => {\n            this.products = data;\n            this.categories = data.map(p => p.category)\n                .filter((c, index, array) => array.indexOf(c) == index).sort();\n        });\n    }\n\n    //get products within category\n    getProducts(category: string = \"\" ): Product[] {\n        return this.products\n            .filter(p => category == \"\" || category == p.category);\n    }\n\n    //get specific product\n    getProduct(id: string): Product {\n        return (this.products.find(p => p._id === id)!);\n    }\n\n    //get list of categories\n    getCategories(): string[] {\n        return this.categories;\n    }\n\n    //get all products\n    getProductdb(): Product[] {\n        return this.products;\n    }\n\n\n    //update/save product\n    async saveProduct(item: Product) {\n\n        // If it does not have id, then create a new item.\n        if (item._id == null || item._id == \"\") {\n            this.dataSource.insertProduct(item)\n                .subscribe(response => {\n                    if(response._id) // If API created\n                    {\n                        this.products.push(response);\n                    }\n                    else{\n                        let error = response as ResponseModel;  \n                        alert(`Error: ${error.message}`);\n                    }\n                });\n\n        // If it has id, then update a existing item.\n        } else {\n            this.dataSource.updateProduct(item).subscribe(response => {\n                if (response.success) {\n                    this.products.splice(this.products.\n                        findIndex(i => i._id == item._id), 1, item);\n                }\n                else{\n                    alert(`Error: ${response.message}`);\n                }        \n            });\n        }\n    }\n\n    //delete product\n    deleteProduct(id: string) {\n        this.dataSource.deleteProduct(id).subscribe(response => {\n            if (response.success) {\n                this.products.splice(this.products.\n                    findIndex(item => item._id == id), 1);                                \n            }\n            else{\n                alert(`Error: ${response.message}`);\n            }\n        })\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}